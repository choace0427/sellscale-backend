<script>
    (function() {
      // Function to generate a random 24-character hash
      function generateHash() {
        var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        var hash = '';
        for (var i = 0; i < 24; i++) {
          hash += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return hash;
      }

      // Function to set a cookie
      function setCookie(name, value, days) {
        var expires = '';
        if (days) {
          var date = new Date();
          date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
          expires = '; expires=' + date.toUTCString();
        }
        document.cookie = name + '=' + (value || '') + expires + '; path=/';
      }

      // Function to get a cookie value
      function getCookie(name) {
        var nameEQ = name + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') c = c.substring(1, c.length);
          if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
        }
        return null;
      }

      // Check if 'ssIdentity' cookie exists, if not, create one
      var ssIdentity = getCookie('ssIdentity');
      if (!ssIdentity) {
        ssIdentity = generateHash();
        setCookie('ssIdentity', ssIdentity, 365); // Set for 365 days
      }

      function sendTrackingData(ip, page) {
        var data = JSON.stringify({ ip: ip, page: page, track_key: {TRACK_KEY_HERE}, ssIdentity: ssIdentity });
        var xhr = new XMLHttpRequest();
        xhr.open("POST", "https://api.sellscale.com/track/webpage", true);
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.send(data);
      }

      function trackPageView() {
        fetch('https://api.ipify.org/?format=json')
          .then(response => response.json())
          .then(data => {
            sendTrackingData(data.ip, window.location.href);
          })
          .catch(error => console.error('Error fetching IP:', error));
      }

      // Track the initial page view
      trackPageView();

      // Listen for popstate event (triggered by navigation changes)
      window.onpopstate = function(event) {
        trackPageView();
      };

      // For single-page applications: observe changes in the body element
      var observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
          if (mutation.type === "childList") {
            trackPageView();
          }
        });
      });

      // Start observing the target node for configured mutations
      observer.observe(document.body, {
        childList: true, // observes direct children
        subtree: true   // observes descendants
      });
    })();
  </script>